CREATE SEQUENCE SEQ_DISPOZITIV
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE SEQUENCE SEQ_CARACTERISTICA
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE SEQUENCE SEQ_UTILIZATOR
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE SEQUENCE SEQ_RECENZIE
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE SEQUENCE SEQ_CRITERIU
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE SEQUENCE SEQ_OPINIE
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE SEQUENCE SEQ_COMENTARIU
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE SEQUENCE SEQ_INFO 
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE TABLE DISPOZITIV(
    ID_DISPOZITIV NUMBER(4) DEFAULT SEQ_DISPOZITIV.NEXTVAL PRIMARY KEY,
    NUME VARCHAR2(50) NOT NULL,
    CATEGORIE VARCHAR2(25) NOT NULL,
    MARCA VARCHAR2(25) NOT NULL,
    PRET_MEDIU NUMBER(5)
);

CREATE TABLE CARACTERISTICA(
    ID_CARACTERISTICA NUMBER(3) DEFAULT SEQ_CARACTERISTICA.NEXTVAL PRIMARY KEY,
    NUME VARCHAR2(25) NOT NULL
);

CREATE TABLE UTILIZATOR(
    ID_UTILIZATOR NUMBER(5) DEFAULT SEQ_UTILIZATOR.NEXTVAL PRIMARY KEY,
    USERNAME VARCHAR2(25) NOT NULL UNIQUE,
    PAROLA VARCHAR2(25) NOT NULL,
    DATA_INREGISTRARE DATE DEFAULT SYSDATE
);
ALTER TABLE UTILIZATOR ADD CONSTRAINT CK_UTILIZATOR_PAROLA
CHECK (
    LENGTH(PAROLA) >= 8 AND 
    REGEXP_LIKE(PAROLA, '[0-9]') AND 
    REGEXP_LIKE(PAROLA, '[A-Z]') AND 
    REGEXP_LIKE(PAROLA, '[!@#$%*()]')
);

CREATE TABLE RECENZIE(
    ID_RECENZIE NUMBER(4) DEFAULT SEQ_RECENZIE.NEXTVAL PRIMARY KEY,
    ID_DISPOZITIV NUMBER(4) NOT NULL REFERENCES DISPOZITIV(ID_DISPOZITIV),
    NOTA NUMBER(2,1) NOT NULL
);

CREATE TABLE CRITERIU(
    ID_CRITERIU NUMBER(3) DEFAULT SEQ_CRITERIU.NEXTVAL PRIMARY KEY,
    NUME VARCHAR2(25) NOT NULL
);

CREATE TABLE OPINIE(
    ID_OPINIE NUMBER(5) DEFAULT SEQ_OPINIE.NEXTVAL PRIMARY KEY,
    ID_DISPOZITIV NUMBER(4) NOT NULL REFERENCES DISPOZITIV(ID_DISPOZITIV),
    ID_UTILIZATOR NUMBER(5) NOT NULL REFERENCES UTILIZATOR(ID_UTILIZATOR),
    TEXT VARCHAR2(500) NOT NULL,
    DATA_POSTARE DATE DEFAULT SYSDATE
);

CREATE TABLE APRECIAZA(
    ID_UTILIZATOR NUMBER(5) NOT NULL REFERENCES UTILIZATOR(ID_UTILIZATOR),
    ID_DISPOZITIV NUMBER(4) NOT NULL REFERENCES DISPOZITIV(ID_DISPOZITIV),
    PRIMARY KEY(ID_UTILIZATOR, ID_DISPOZITIV)
);

CREATE TABLE DISPOZITIV_ARE_CARACTERISTICI(
    ID_DISPOZITIV NUMBER(4) NOT NULL REFERENCES DISPOZITIV(ID_DISPOZITIV),
    ID_CARACTERISTICA NUMBER(3) NOT NULL REFERENCES CARACTERISTICA(ID_CARACTERISTICA),
    VALOARE VARCHAR2(50) NOT NULL,
    PRIMARY KEY(ID_DISPOZITIV, ID_CARACTERISTICA)
);

CREATE TABLE COMENTARIU(
    ID_COMENTARIU NUMBER(5) DEFAULT SEQ_COMENTARIU.NEXTVAL PRIMARY KEY,
    ID_UTILIZATOR NUMBER(5) NOT NULL REFERENCES UTILIZATOR(ID_UTILIZATOR),
    ID_RECENZIE NUMBER(4) NOT NULL REFERENCES RECENZIE(ID_RECENZIE),
    TEXT VARCHAR2(500) NOT NULL,
    DATA_POSTARE DATE DEFAULT SYSDATE
);

CREATE TABLE NOTEAZA(
    ID_RECENZIE NUMBER(4) NOT NULL REFERENCES RECENZIE(ID_RECENZIE),
    ID_CRITERIU NUMBER(3) NOT NULL REFERENCES CRITERIU(ID_CRITERIU),
    NOTA NUMBER(2,1) NOT NULL,
    EXPLICATIE VARCHAR2(255),
    PRIMARY KEY(ID_RECENZIE, ID_CRITERIU)
);

CREATE OR REPLACE TYPE t_id_recenzie IS TABLE OF NUMBER(4);

CREATE OR REPLACE TRIGGER trig_nota_recenzie
    FOR INSERT OR UPDATE OR DELETE ON NOTEAZA
    COMPOUND TRIGGER 
V_ID_RECENZIE T_ID_RECENZIE := T_ID_RECENZIE();

AFTER EACH ROW IS
BEGIN
    IF INSERTING THEN 
        V_ID_RECENZIE.EXTEND;
        V_ID_RECENZIE(V_ID_RECENZIE.LAST) := :NEW.ID_RECENZIE;
    ELSIF UPDATING('NOTA') OR DELETING THEN
        V_ID_RECENZIE.EXTEND;
        V_ID_RECENZIE(V_ID_RECENZIE.LAST) := :OLD.ID_RECENZIE;
    END IF;
END AFTER EACH ROW;

AFTER STATEMENT IS
BEGIN 
    IF V_ID_RECENZIE.COUNT != 0 THEN
        FOR I IN 1..V_ID_RECENZIE.COUNT LOOP
        UPDATE RECENZIE 
        SET NOTA = (SELECT NVL(AVG(NOTA), 0) FROM NOTEAZA WHERE ID_RECENZIE = V_ID_RECENZIE(I))
        WHERE ID_RECENZIE = V_ID_RECENZIE(I);
        END LOOP;
    END IF;
END AFTER STATEMENT;
END trig_nota_recenzie;
/


